---
layout:     post   				    # 使用的布局（不需要改）
title:      Build a Spring from Zero(1)  		# 标题 
subtitle:   Unit test and JUnit       #副标题
date:       2020-03-28		# 时间
author:     Haiming 						# 作者
header-img: img/post-bg-2015.jpg 	#这篇文章标题背景图片
catalog: true 						# 是否归档
tags:								#标签
    - Programming
    - Java
    - Spring
---

Nowadays we always use Spring to do web application development, especially for backend part.  Although there is another trend for backend part to use Golang, Java is still the most popular language for web application. The best way to study Spring, from my consideration, is to rebuild another one that can achieve most functions of Spring. So this is the first part for building my own Spring——SpringHaiming :) .

This article is for Unit test.

# 1. What is Unit test

Though we already know what it is, it's still necessary to introduce the definition of unit test. 

Unit test is a piece of code written by developer, to test if the functions for one small module can work well. Usually is to test one class or method. 

# 2. How to use JUnit

## For one method/ code piece

If we only test one method, we an use annotation and 

## How to organize thousands of test cases?

##  JUnit assertion

There are 4 types of assertion for JUnit that we often use.

1. Assert.assertEquals(expected,actual)
2. Assert.assertTrue(condition)
3. Assert.assertNotNull(object)
4. Assert.assertArrayEquals(expected, actuals)

## How to test Exception

# 3. Advantages of unit test

Unit test has three aspects of advantages:

1. Validate advantages: it can make sure the correction of code, and set "safety net" for adding new functions when code is very complex, or when we do refactor.
2. Design advantages: it can force us to view and think questions at the perspective of users, and "force" us to design code to testable and loosely coupled.
3. Document advantages: Unit test can describe manners of code precisely, and is the best document for how to use method and class.

# 4. Principles for unit test

1. Keep the simplicity and readable for all tests! Unit test isn't only for computer to execute, but also the documents for others to read.
2. Unit test must be isolated. One test case cannot influence other test cases, also cannot rely on other test cases, what means test cases can be executed in any sequences.
3. Unit test must be repeatable. We all know that if a piece of code only can be used for some environments or conditions, it is not qualified.
4. Unit test should be executed fast, if test case uses some sl ow components, such as database or network, should use mock to decouple them.
5. Automation unit tests. Can just integrated into build process.

# 5.  How to test old codes?

There are a lot of codes which are very old, so that we cannot write the test cases very easily.  Such as there are some classes need containers like Servlet, or the class contains a lot of other initialized methods like `ejbCreate` One of solutions for this situation is we can refactor the code into some implement classes, like if we have one Class that has a lot of methods:

![1585404452531](/img/1585404452531.png)

But we only need to test the method `transfer()`. So we can refactor it into one implementation class called `AccountImpl`,which relation ship is this one:

![1585404531050](/img/1585404531050.png)

Then we can just test this `AccountImpl` class.

